m_sd = 57222
sng_sd = m_sd + 894
pat_sd = m_sd + 902
kit_sd = m_sd + 8979
kc_sd = kit_sd + 8989
sn_sd = kit_sd + 8982
pc_sd = kit_sd + 8981
use_random_seed m_sd
use_bpm rrand(40,80)
key = rrand_i(50,62)
mode = :major
scl = (scale key, mode, octs: dice(3))
b_scl = (scale key - 24, mode, octs: dice(2))
chords = [1,2,3,4,5]
cho_pro = [chords.choose, chords.choose, chords.choose, chords.choose, chords.choose, chords.choose]

key_synths = [:zawa,:tech_saws,:pulse,:prophet,:pretty_bell,:pluck,:piano,:hollow,:fm,:dpulse,:dsaw,:dtri,:chiplead,:beep,:square,:supersaw,:saw,:sine]

live_loop :songer do
  set :chord, (chord_degree 1, key, :major)
  sleep1 = [0.495,1.005,1.495].choose
  sleep sleep1
  3.times do
    cho_mo = :major
    cho_mo = :minor if cho_pro[look] == 2
    cho_mo = :minor if cho_pro[look] == 3
    set :chord, (chord_degree cho_pro[look], key, cho_mo)
    sleep2 = [0.5,1.0,1.5].choose
    sleep sleep2
    cho_mo = :major
    cho_mo = :minor if cho_pro[look] == 2
    cho_mo = :minor if cho_pro[look] == 3
    set :chord, (chord_degree cho_pro[look], key, cho_mo)
    sleep 2 - sleep2
  end
  set :chord, (chord_degree [4,5].choose, key, :major)
  sleep 2 - sleep1
end





live_loop :keys do
  tick_reset
  use_random_seed m_sd
  use_synth key_synths.choose
  play_chord get[:chord]
  sleep 0.25
  play_chord get[:chord], amp: rand if one_in(8)
  sleep 0.25
  play_chord get[:chord], amp: rand if one_in(4)
  sleep 0.25
  play_chord get[:chord], amp: rand if one_in(8)
  sleep 0.25
  6.times do
    tick if one_in(3)
    use_synth key_synths.choose if one_in(8)
    play_chord get[:chord], amp: rand if one_in(4)
    sleep 0.25
    play_chord get[:chord], amp: rand if one_in(8)
    sleep 0.25
    play_chord get[:chord], amp: rand if one_in(4)
    sleep 0.25
    play_chord get[:chord], amp: rand if one_in(8)
    sleep 0.25
  end
  play_chord get[:chord]
  sleep 0.5
  play_chord get[:chord]
  sleep 0.5
end

live_loop :hatta do
  soft_hats 4,4,8,9
  soft_hats 4,4,8,99
  soft_hats 4,4,8,9
  soft_hats_fill 8,2,8,99
end

live_loop :drumma do
  use_bpm_mul 0.25
  drumb 4,6,kc_sd,sn_sd,pc_sd+54,pat_sd
  drumb 3,2,kc_sd,sn_sd,pc_sd+55,pat_sd+3
  drumb 2,1,kc_sd,sn_sd,pc_sd+58,pat_sd+3
end


#default_step_odds = [30,15,15, 9, 6, 3, 12] #x% chance
default_step_odds = [ 3, 6, 7,11,15,30] # 1 in x chance, sequentially
set :melo_stepodds, default_step_odds
set :melo_dir, 1
set :melo_dirodds, 0.85
set :melo_last, false
define :play_melo do |rootnt,botnt,topnt|
  synatk = rrand(0.05,0.5)
  synrel = rrand(0.05,0.5)
  synsus = rrand(0.15,0.5) - synatk - synrel
  synsus = 0 if synsus < 0
  if(get[:melo_last] == false)
    play_deg = 1
    play_deg = 5 if one_in(2)
    set :melo_last, play_deg
    play_note = degree(play_deg, key, mode)
    play_note += 12 * oct
    play play_note, amp: rrand(0.7,1), attack: synatk, sustain: synsus, release: synrel
  else
    
    
    odds = get[:melo_stepodds]
    jump = 7
    jump = 1 if (one_in(odds[0]))
    jump = 2 if (one_in(odds[1]))
    jump = 3 if (one_in(odds[2]))
    jump = 4 if (one_in(odds[3]))
    jump = 5 if (one_in(odds[4]))
    jump = 6 if (one_in(odds[5]))
    play_deg = get[:melo_last]
    
    if (rand > get[:melo_dirodds])
      set :melo_dir, get[:melo_dir] * -1
    end
    if (get[:melo_dir] == -1)
      jump *= -1
    end
    play_deg += jump
    set :melo_last, play_deg
    play_deg = (play_deg % 7) + 1
    play_note = degree(play_deg, key, mode)
    play_note += 12 * oct
    play play_note, amp: rrand(0.7,1), attack: synatk, sustain: synsus, release: synrel
  end
end

melo_synth = key_synths.choose
live_loop :do_melo do
  use_random_seed pat_sd
  2.times do
    temp_sd = rand(999999)
    4.times do
      use_random_seed temp_sd
      use_synth melo_synth
      2.times do
        play_melo :A1, :A2, :C3 if one_in(3)
        sleep 0.125
        play_melo :A1, :A2, :C3 if one_in(9)
        sleep 0.125
      end
    end
    4.times do
      use_random_seed temp_sd*9
      use_synth melo_synth
      2.times do
        play_melo :A1, :A2, :C3 if one_in(3)
        sleep 0.125
        play_melo :A1, :A2, :C3 if one_in(9)
        sleep 0.125
      end
    end
  end
end



##| live_loop :melo do
##|   use_synth key_synths.choose
##|   with_fx :distortion do
##|     use_random_seed sng_sd
##|     4.times do
##|       use_synth key_synths.choose if one_in(3)
##|       4.times do
##|         use_random_seed rand(99999)
##|         2.times do
##|           dachord = get[:chord]
##|           play dachord.first + (12*[-1,0,1,2].choose), release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.5,0.8) if one_in(5)
##|           sleep 0.125
##|           play scl.choose, release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           dachord = get[:chord]
##|           play dachord.choose + (12*[-1,0,1,2].choose), release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           play scl.choose, release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           dachord = get[:chord]
##|           play dachord.choose + (12*[-1,0,1,2].choose), release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           play scl.choose, release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           dachord = get[:chord]
##|           play dachord.choose + (12*[-1,0,1,2].choose), release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|           play scl.choose, release: rrand(0.1,0.3), cutoff: rrand_i(50,120), amp: rrand(0.2,0.9) if one_in(5)
##|           sleep 0.125
##|         end
##|       end
##|     end
##|   end
##| end
